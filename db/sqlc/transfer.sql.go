// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: transfer.sql

package db

import (
	"context"
)

const createTransfer = `-- name: CreateTransfer :exec
INSERT INTO transfer (id, from_account_id, to_account_id, amount)
VALUES (?, ?, ?, ?)
`

type CreateTransferParams struct {
	ID            int64 `json:"id"`
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	Amount        int64 `json:"amount"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) error {
	_, err := q.db.ExecContext(ctx, createTransfer,
		arg.ID,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Amount,
	)
	return err
}

const findAllTransfers = `-- name: FindAllTransfers :many
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfer
`

func (q *Queries) FindAllTransfers(ctx context.Context) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, findAllTransfers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findLastTransferInsertedId = `-- name: FindLastTransferInsertedId :one
SELECT LAST_INSERT_ID()
`

func (q *Queries) FindLastTransferInsertedId(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, findLastTransferInsertedId)
	var last_insert_id int64
	err := row.Scan(&last_insert_id)
	return last_insert_id, err
}

const findTransferById = `-- name: FindTransferById :one
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfer e
WHERE e.id = ? LIMIT 1
`

func (q *Queries) FindTransferById(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, findTransferById, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const findTransfersByFromAccountIdAndToAccountId = `-- name: FindTransfersByFromAccountIdAndToAccountId :many
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfer t
WHERE t.from_account_id = ?
   OR t.to_account_id = ?
ORDER BY t.id
LIMIT ? OFFSET ?
`

type FindTransfersByFromAccountIdAndToAccountIdParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
}

func (q *Queries) FindTransfersByFromAccountIdAndToAccountId(ctx context.Context, arg FindTransfersByFromAccountIdAndToAccountIdParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, findTransfersByFromAccountIdAndToAccountId,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
