// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: account.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :exec
INSERT INTO account (id, owner, balance, currency)
VALUES (?, ?, ?, ?)
`

type CreateAccountParams struct {
	ID       string `json:"id"`
	Owner    string `json:"owner"`
	Balance  int64  `json:"balance"`
	Currency string `json:"currency"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.db.ExecContext(ctx, createAccount,
		arg.ID,
		arg.Owner,
		arg.Balance,
		arg.Currency,
	)
	return err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM account WHERE id = ?
`

func (q *Queries) DeleteAccount(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const findAccountById = `-- name: FindAccountById :one
SELECT id, owner, balance, currency, created_at FROM account acc
WHERE acc.id = ? LIMIT 1
`

func (q *Queries) FindAccountById(ctx context.Context, id string) (Account, error) {
	row := q.db.QueryRowContext(ctx, findAccountById, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const findAllAccounts = `-- name: FindAllAccounts :many
SELECT id, owner, balance, currency, created_at FROM account
`

func (q *Queries) FindAllAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, findAllAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :exec
UPDATE account SET balance = ? WHERE id = ?
`

type UpdateAccountParams struct {
	Balance int64  `json:"balance"`
	ID      string `json:"id"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) error {
	_, err := q.db.ExecContext(ctx, updateAccount, arg.Balance, arg.ID)
	return err
}
